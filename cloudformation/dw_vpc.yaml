Description: |
    Create the VPC for the Redshift data warehouse and its ETL.

#    We use one public and one private subnet, an Internet Gateway, a service
#    Endpoint (for S3 and DynamoDB), a NAT Gateway and lots of security groups.
#    This VPC should then be referenced when building clusters to use its exported outputs.

AWSTemplateFormatVersion: '2010-09-09'


Parameters:

    DataLake:
        Description: (required) A bucket where data is stored, likely using 'unload', for other applications
        Type: String
        MinLength: 3
        MaxLength: 63
        AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
        ConstraintDescription: Must be DNS-friendly, consisting of letters, numbers and hyphens.

    ObjectStore1:
        Description: (recommended) A bucket where schemas and data will be stored (temporarily) for first cluster
        Type: String
        Default: default-will-be-ignored
        MinLength: 3
        MaxLength: 63
        AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
        ConstraintDescription: Must be DNS-friendly, consisting of letters, numbers and hyphens.

    ObjectStore2:
        Description: (optional) A bucket where schemas and data will be stored (temporarily) for second cluster
        Type: String
        Default: default-will-be-ignored
        MinLength: 3
        MaxLength: 63
        AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
        ConstraintDescription: Must be DNS-friendly, consisting of letters, numbers and hyphens.

    ObjectStore3:
        Description: (optional) A bucket where schemas and data will be stored (temporarily) for third cluster
        Type: String
        Default: default-will-be-ignored
        MinLength: 3
        MaxLength: 63
        AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*$
        ConstraintDescription: Must be DNS-friendly, consisting of letters, numbers and hyphens.

    VpcNetworkSelection:
        Description: (required) Second octect of the IP range (final IP range is 10.(selection).0.0/16),
            e.g. 20 for production and 30 for development
        Type: Number
        MinValue: 0
        MaxValue: 255

    PrimaryAvailabilityZone:
        Description: (optional) Availability zone for the subnets
        Type: String
        Default: us-east-1d
        # Choices are limited by the possible locations for the Redshift cluster.
        AllowedValues: ["us-east-1a", "us-east-1c", "us-east-1d"]

    WhitelistCIDR1:
        Description: (recommended) First IP range in CIDR notation that can be used to connect to EC2 instances or Redshift
        Type: String
        Default: 0.0.0.0/0
        MinLength: 9
        MaxLength: 18
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

    WhitelistCIDR2:
        Description: (recommended) Second IP range in CIDR notation that can be used to connect to EC2 instances or Redshift
        Type: String
        Default: 0.0.0.0/0
        MinLength: 9
        MaxLength: 18
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

    WhitelistCIDR3:
        Description: (recommended) Third IP range in CIDR notation that can be used to connect to EC2 instances or Redshift
        Type: String
        Default: 0.0.0.0/0
        MinLength: 9
        MaxLength: 18
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

    WhitelistCIDR4:
        Description: (recommended) Fourth IP range in CIDR notation that can be used to connect to EC2 instances or Redshift
        Type: String
        Default: 0.0.0.0/0
        MinLength: 9
        MaxLength: 18
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x

    WhitelistCIDR5:
        Description: (frivolous) Fifth IP range in CIDR notation that can be used to connect to EC2 instances or Redshift
        Type: String
        Default: 0.0.0.0/0
        MinLength: 9
        MaxLength: 18
        AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
        ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x


Conditions:

    ValidObjectStore1:
        !Not [ !Equals [ !Ref ObjectStore1, "default-will-be-ignored" ] ]

    ValidObjectStore2:
        !Not [ !Equals [ !Ref ObjectStore2, "default-will-be-ignored" ] ]

    ValidObjectStore3:
        !Not [ !Equals [ !Ref ObjectStore3, "default-will-be-ignored" ] ]

    ValidNotAnythingWhitelistCIDR1:
        !Not [ !Equals [ !Ref WhitelistCIDR1, "0.0.0.0/0" ] ]

    ValidNotAnythingWhitelistCIDR2:
        !Not [ !Equals [ !Ref WhitelistCIDR2, "0.0.0.0/0" ] ]

    ValidNotAnythingWhitelistCIDR3:
        !Not [ !Equals [ !Ref WhitelistCIDR3, "0.0.0.0/0" ] ]

    ValidNotAnythingWhitelistCIDR4:
        !Not [ !Equals [ !Ref WhitelistCIDR4, "0.0.0.0/0" ] ]

    ValidNotAnythingWhitelistCIDR5:
        !Not [ !Equals [ !Ref WhitelistCIDR5, "0.0.0.0/0" ] ]


Resources:

    VPC:
        Type: "AWS::EC2::VPC"
        Properties:
            CidrBlock: !Sub "10.${VpcNetworkSelection}.0.0/16"
            EnableDnsSupport: true
            EnableDnsHostnames: true
            Tags:
                - Key: Name
                  Value: !Ref "AWS::StackName"

    InternetGateway:
        Type: "AWS::EC2::InternetGateway"
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-igw"

    InternetGatewayAttachment:
        Type: "AWS::EC2::VPCGatewayAttachment"
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

    PublicSubnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref PrimaryAvailabilityZone
            CidrBlock: !Sub "10.${VpcNetworkSelection}.0.0/22"
            MapPublicIpOnLaunch: true
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-public-${AWS::Region}"

    PrivateSubnet:
        Type: "AWS::EC2::Subnet"
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref PrimaryAvailabilityZone
            CidrBlock: !Sub "10.${VpcNetworkSelection}.24.0/22"
            MapPublicIpOnLaunch: false
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-private-${AWS::Region}"

    NatGatewayEIP:
        Type: "AWS::EC2::EIP"
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    NatGateway:
        Type: "AWS::EC2::NatGateway"
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref PublicSubnet
        # Cannot be tagged during creation: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html

    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-route-public"

    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet

    PrivateRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-route-private"

    DefaultPrivateRoute:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NatGateway

    PrivateSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable
            SubnetId: !Ref PrivateSubnet

    VPCEndpointForS3:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcId: !Ref VPC
            PolicyDocument: {
                Version: "2012-10-17",
                Statement: [
                    {
                        "Sid": "ReadOnlyEverything",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                            "s3:Describe*",
                            "s3:Get*",
                            "s3:List*"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "WriteSelective",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                            "s3:DeleteObject*",
                            "s3:PutObject*"
                        ],
                        "Resource": [
                            !Sub "arn:aws:s3:::${DataLake}/*" ,
                            !If [ ValidObjectStore1, !Sub "arn:aws:s3:::${ObjectStore1}/*", !Ref "AWS::NoValue" ] ,
                            !If [ ValidObjectStore2, !Sub "arn:aws:s3:::${ObjectStore2}/*", !Ref "AWS::NoValue" ] ,
                            !If [ ValidObjectStore3, !Sub "arn:aws:s3:::${ObjectStore3}/*", !Ref "AWS::NoValue" ]
                        ]
                    }
                ]
            }
            RouteTableIds:
                - !Ref PublicRouteTable
                - !Ref PrivateRouteTable
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"

    VPCEndpointForDynamoDB:
        Type: "AWS::EC2::VPCEndpoint"
        Properties:
            VpcId: !Ref VPC
            PolicyDocument: {
                Version: "2012-10-17",
                Statement: [
                    {
                        "Sid": "ReadOnlyAllTables",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                            "dynamodb:BatchGetItem",
                            "dynamodb:Describe*",
                            "dynamodb:Get*",
                            "dynamodb:List*",
                            "dynamodb:Query",
                            "dynamodb:Scan"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Sid": "WriteEventsTables",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": [
                            "dynamodb:BatchWriteItem",
                            "dynamodb:CreateTable",
                            "dynamodb:DeleteItem",
                            "dynamodb:DeleteTable",
                            "dynamodb:PutItem",
                            "dynamodb:UpdateItem",
                            "dynamodb:UpdateTable",
                            "dynamodb:UpdateTimeToLive",
                            "dynamodb:TagResource",
                            "dynamodb:UntagResource"
                        ],
                        "Resource": !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/dw-etl-*"
                  }
                ]
            }
            RouteTableIds:
                - !Ref PublicRouteTable
                - !Ref PrivateRouteTable
            ServiceName: !Sub "com.amazonaws.${AWS::Region}.dynamodb"

    WhitelistSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Enable SSH access via port 22 from an office IP or known applications
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR1, !Ref "WhitelistCIDR1", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR2, !Ref "WhitelistCIDR2", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR3, !Ref "WhitelistCIDR3", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR4, !Ref "WhitelistCIDR4", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: "22"
                  ToPort: "22"
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR5, !Ref "WhitelistCIDR5", !Ref "AWS::NoValue" ]
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-office"

    RedshiftLambdaSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Place Lambda into this security group for access to Redshift
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-redshift-lambda"

    RedshiftEC2SecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Place EC2 instance into this security group for access to Redshift
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-redshift-ec2"

    ManagedMasterSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Access to instances in the master list of an EMR cluster (with addtional access to Redshift)
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-managed-master"

    ManagedCoreSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Access to instances in the core list of an EMR cluster
            VpcId: !Ref VPC
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-managed-core"

    # Although EMR can update the security groups to add these ingress rules, the resulting cyclic
    # redundancy would prevent us from later deleting the stack. So we setup the rules explicitly.

    ManagedMasterSecurityGroupIngressTCPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedMasterSecurityGroupIngressTCPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedMasterSecurityGroupIngressUDPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "udp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedMasterSecurityGroupIngressUDPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "udp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedMasterSecurityGroupIngressICMPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "icmp"
            FromPort: -1
            ToPort: -1
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedMasterSecurityGroupIngressICMPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "icmp"
            FromPort: -1
            ToPort: -1
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    ManagedCoreSecurityGroupIngressTCPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    ManagedCoreSecurityGroupIngressTCPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    ManagedCoreSecurityGroupIngressUDPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "udp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    ManagedCoreSecurityGroupIngressUDPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "udp"
            FromPort: 0
            ToPort: 65535
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    ManagedCoreSecurityGroupIngressICMPFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "icmp"
            FromPort: -1
            ToPort: -1
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    ManagedCoreSecurityGroupIngressICMPFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "icmp"
            FromPort: -1
            ToPort: -1
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref ManagedCoreSecurityGroup

    RedshiftEC2SecurityGroupIngressFromItself:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref RedshiftEC2SecurityGroup
            GroupId: !Ref RedshiftEC2SecurityGroup

    RedshiftEC2SecurityGroupIngressFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref RedshiftEC2SecurityGroup

    RedshiftEC2SecurityGroupIngressFromCore:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 22
            ToPort: 22
            SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
            GroupId: !Ref RedshiftEC2SecurityGroup

    RedshiftEC2SecurityGroupHttpIngressFromItself:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 8086
            ToPort: 8086
            SourceSecurityGroupId: !Ref RedshiftEC2SecurityGroup
            GroupId: !Ref RedshiftEC2SecurityGroup

    RedshiftEC2SecurityGroupIngressHttpFromMaster:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 8086
            ToPort: 8086
            SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
            GroupId: !Ref RedshiftEC2SecurityGroup

    ManagedMasterSecurityGroupIngressHttpFromEC2:
        Type: "AWS::EC2::SecurityGroupIngress"
        Properties:
            IpProtocol: "tcp"
            FromPort: 8086
            ToPort: 8086
            SourceSecurityGroupId: !Ref RedshiftEC2SecurityGroup
            GroupId: !Ref ManagedMasterSecurityGroup

    RedshiftPublicSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupDescription: Access to Redshift from ETL instances, Heap and Looker
            VpcId: !Ref VPC
            SecurityGroupIngress:
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  SourceSecurityGroupId: !Ref RedshiftLambdaSecurityGroup
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  SourceSecurityGroupId: !Ref RedshiftEC2SecurityGroup
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  SourceSecurityGroupId: !Ref ManagedMasterSecurityGroup
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  SourceSecurityGroupId: !Ref ManagedCoreSecurityGroup
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR1, !Ref "WhitelistCIDR1", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR2, !Ref "WhitelistCIDR2", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR3, !Ref "WhitelistCIDR3", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR4, !Ref "WhitelistCIDR4", !Ref "AWS::NoValue" ]
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: !If [ ValidNotAnythingWhitelistCIDR5, !Ref "WhitelistCIDR5", !Ref "AWS::NoValue" ]
                # Heap
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 52.20.48.42/32
                # Looker
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 54.208.10.167/32
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 54.209.116.191/32
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 52.1.5.228/32
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 52.1.157.156/32
                - IpProtocol: "tcp"
                  FromPort: 5439
                  ToPort: 5439
                  CidrIp: 54.83.113.5/32
            Tags:
                - Key: Name
                  Value: !Sub "${AWS::StackName}-redshift-public"

    # This starts from the default EMR role and from the default Data Pipeline role
    # (For testing with EMR clusters outside a data pipeline, the EMR service must also be able to assume this role.)
    DataPipelineRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                  - Effect: "Allow"
                    Principal:
                        Service:
                            - "elasticmapreduce.amazonaws.com"
                            - "datapipeline.amazonaws.com"
                    Action: "sts:AssumeRole"
            # Must use the standard Path because ElasticMapReduce does not support something other than '/'
            Path: "/"
            Policies:
                - PolicyName: "service_role_default_policy"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "application-autoscaling:DeleteScalingPolicy"
                                - "application-autoscaling:DeregisterScalableTarget"
                                - "application-autoscaling:Describe*"
                                - "application-autoscaling:PutScalingPolicy"
                                - "application-autoscaling:RegisterScalableTarget"
                                - "cloudwatch:*"
                                - "datapipeline:DescribeObjects"
                                - "datapipeline:EvaluateExpression"
                                - "dynamodb:BatchGetItem"
                                - "dynamodb:DescribeTable"
                                - "dynamodb:GetItem"
                                - "dynamodb:Query"
                                - "dynamodb:Scan"
                                - "dynamodb:UpdateTable"
                                - "ec2:AuthorizeSecurityGroupEgress"
                                - "ec2:AuthorizeSecurityGroupIngress"
                                - "ec2:CancelSpotInstanceRequests"
                                - "ec2:CreateNetworkInterface"
                                - "ec2:CreateSecurityGroup"
                                - "ec2:CreateTags"
                                - "ec2:DeleteNetworkInterface"
                                - "ec2:DeleteSecurityGroup"
                                - "ec2:DeleteTags"
                                - "ec2:DeleteVolume"
                                - "ec2:Describe*"
                                - "ec2:DetachNetworkInterface"
                                - "ec2:DetachVolume"
                                - "ec2:ModifyImageAttribute"
                                - "ec2:ModifyInstanceAttribute"
                                - "ec2:RequestSpotInstances"
                                - "ec2:RevokeSecurityGroupEgress"
                                - "ec2:RunInstances"
                                - "ec2:StartInstances"
                                - "ec2:StopInstances"
                                - "ec2:TerminateInstances"
                                - "elasticmapreduce:*"
                                - "iam:GetInstanceProfile"
                                - "iam:GetRole"
                                - "iam:GetRolePolicy"
                                - "iam:ListAttachedRolePolicies"
                                - "iam:ListInstanceProfiles"
                                - "iam:ListRolePolicies"
                                - "iam:PassRole"
                                - "rds:DescribeDBInstances"
                                - "rds:DescribeDBSecurityGroups"
                                - "redshift:DescribeClusters"
                                - "redshift:DescribeClusterSecurityGroups"
                                - "s3:CreateBucket"
                                - "s3:DeleteObject"
                                - "s3:Get*"
                                - "s3:List*"
                                - "s3:Put*"
                                - "sdb:BatchPutAttributes"
                                - "sdb:Select"
                                - "sdb:Select*"
                                - "sns:GetTopicAttributes"
                                - "sns:ListTopics"
                                - "sns:Publish"
                                - "sns:Subscribe"
                                - "sns:Unsubscribe"
                                - "sqs:CreateQueue"
                                - "sqs:Delete*"
                                - "sqs:GetQueue*"
                                - "sqs:PurgeQueue"
                                - "sqs:ReceiveMessage"
                            Resource: "*"

    # This starts from the default EMR instance profile role plus the Data Pipeline default resource role.
    # (NB We need allow ec2:CreateTags here so that bootstrap can update the tags of the instance.)
    Ec2Role:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: !Sub "${AWS::StackName}-ec2-role"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service: "ec2.amazonaws.com"
                      Action: "sts:AssumeRole"
            Path: "/"
            Policies:
                - PolicyName: "resource_role_default_policy"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Effect: "Allow"
                            Action:
                                - "cloudwatch:*"
                                - "datapipeline:*"
                                - "dynamodb:*"
                                - "ec2:CreateTags"
                                - "ec2:Describe*"
                                - "elasticmapreduce:AddJobFlowSteps"
                                - "elasticmapreduce:Describe*"
                                - "elasticmapreduce:ListBootstrapActions"
                                - "elasticmapreduce:ListClusters"
                                - "elasticmapreduce:ListInstance*"
                                - "elasticmapreduce:ListInstances"
                                - "elasticmapreduce:ListSteps"
                                - "elasticmapreduce:ModifyInstanceGroups"
                                - "kinesis:CreateStream"
                                - "kinesis:DeleteStream"
                                - "kinesis:DescribeStream"
                                - "kinesis:GetRecords"
                                - "kinesis:GetShardIterator"
                                - "kinesis:MergeShards"
                                - "kinesis:PutRecord"
                                - "kinesis:SplitShard"
                                - "rds:Describe*"
                                - "redshift:DescribeClusters"
                                - "redshift:DescribeClusterSecurityGroups"
                                - "s3:*"
                                - "sdb:*"
                                - "sns:*"
                                - "sqs:*"
                            Resource: "*"

    Ec2InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            InstanceProfileName: !Sub "${AWS::StackName}-ec2-instance-profile"
            Path: "/"
            Roles:
                - !Ref Ec2Role

    # Oops, misspellled this one.  Bring up new role, switch over, delete this one...
    RedshiftCopyCole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service: "redshift.amazonaws.com"
                      Action: "sts:AssumeRole"
            # Must use the standard Path because Redshift does not support something other than '/'
            Path: "/"
            Policies:
                - PolicyName: "redshift_access"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Sid: "ReadAccessBuckets"
                            Effect: "Allow"
                            Action: "s3:ListBucket*"
                            Resource: "arn:aws:s3:::*"
                          - Sid: "ReadAccessObjects"
                            Effect: "Allow"
                            Action: "s3:GetObject"
                            Resource: "arn:aws:s3:::*/*"
                          - Sid: "WriteAccess"
                            Effect: "Allow"
                            Action:
                                - "s3:DeleteObject"
                                - "s3:PutObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${DataLake}/*"
                                - !If [ ValidObjectStore1, !Sub "arn:aws:s3:::${ObjectStore1}/*", !Ref "AWS::NoValue" ]
                                - !If [ ValidObjectStore2, !Sub "arn:aws:s3:::${ObjectStore2}/*", !Ref "AWS::NoValue" ]
                                - !If [ ValidObjectStore3, !Sub "arn:aws:s3:::${ObjectStore3}/*", !Ref "AWS::NoValue" ]
                          - Sid: "EventAccess"
                            Effect: "Allow"
                            Action:
                                - "dynamodb:Describe*"
                                - "dynamodb:Scan"
                            Resource: "arn:aws:dynamodb:*:*:table/dw-etl-*"

    RedshiftCopyRole:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: "Allow"
                      Principal:
                          Service: "redshift.amazonaws.com"
                      Action: "sts:AssumeRole"
            # Must use the standard Path because Redshift does not support something other than '/'
            Path: "/"
            Policies:
                - PolicyName: "access_from_redshift"
                  PolicyDocument:
                      Version: "2012-10-17"
                      Statement:
                          - Sid: "ReadAccessBuckets"
                            Effect: "Allow"
                            Action: "s3:ListBucket*"
                            Resource: "arn:aws:s3:::*"
                          - Sid: "ReadAccessObjects"
                            Effect: "Allow"
                            Action: "s3:GetObject"
                            Resource: "arn:aws:s3:::*/*"
                          - Sid: "WriteAccess"
                            Effect: "Allow"
                            Action:
                                - "s3:DeleteObject"
                                - "s3:PutObject"
                            Resource:
                                - !Sub "arn:aws:s3:::${DataLake}/*"
                                - !If [ ValidObjectStore1, !Sub "arn:aws:s3:::${ObjectStore1}/*", !Ref "AWS::NoValue" ]
                                - !If [ ValidObjectStore2, !Sub "arn:aws:s3:::${ObjectStore2}/*", !Ref "AWS::NoValue" ]
                                - !If [ ValidObjectStore3, !Sub "arn:aws:s3:::${ObjectStore3}/*", !Ref "AWS::NoValue" ]
                          - Sid: "EventAccess"
                            Effect: "Allow"
                            Action:
                                - "dynamodb:Describe*"
                                - "dynamodb:Scan"
                            Resource: "arn:aws:dynamodb:*:*:table/dw-etl-*"


Outputs:

    VpcId:
        Description: A reference to the created VPC
        Value: !Ref VPC
        Export:
            Name: !Sub "${AWS::StackName}::vpc-id"

    VpcRegion:
        Description: (VPC.region) Name of the region
        Value: !Ref "AWS::Region"

    DataLake:
        Description: (data_lake.s3.bucket_name) Name of the bucket for the data lake
        Value: !Ref DataLake
        Export:
            Name: !Sub "${AWS::StackName}::data-lake"

    ObjectStore1:
        Description: (object_store.s3.bucket_name) Name of the first bucket acting as an object store
        Value: !Ref ObjectStore1

    ObjectStore2:
        Description: (object_store.s3.bucket_name) Name of the second bucket acting as an object store
        Value: !Ref ObjectStore2

    ObjectStore3:
        Description: (object_store.s3.bucket_name) Name of the second bucket acting as an object store
        Value: !Ref ObjectStore3

    ConcatenatedBucketArns:
        Description: List of ARNs for buckets referenced to which users would need access
        Value: !Join [ "," , [
            !Sub "arn:aws:s3:::${DataLake}/*" ,
            !If [ ValidObjectStore1, !Sub "arn:aws:s3:::${ObjectStore1}/*", !Ref "AWS::NoValue" ] ,
            !If [ ValidObjectStore2, !Sub "arn:aws:s3:::${ObjectStore2}/*", !Ref "AWS::NoValue" ] ,
            !If [ ValidObjectStore3, !Sub "arn:aws:s3:::${ObjectStore3}/*", !Ref "AWS::NoValue" ]
        ] ]
        Export:
            Name: !Sub "${AWS::StackName}::concatenated-bucket-arns"
